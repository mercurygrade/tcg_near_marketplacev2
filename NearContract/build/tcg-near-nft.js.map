{"version":3,"file":"tcg-near-nft.js","sources":["../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-contract.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/collections/unordered-set.js","../src/nft/metadata.ts","../src/nft/internal.ts","../src/nft/mint.ts","../src/nft/nftcontract.ts"],"sourcesContent":["export function call(target, key, descriptor) {\n}\nexport function view(target, key, descriptor) {\n}\nexport function NearBindgen(target) {\n    return class extends target {\n        static _init() {\n            // @ts-ignore\n            let args = target.deserializeArgs();\n            let ret = new target(args);\n            // @ts-ignore\n            ret.init();\n            // @ts-ignore\n            ret.serialize();\n            return ret;\n        }\n        static _get() {\n            let ret = Object.create(target.prototype);\n            return ret;\n        }\n    };\n}\n","const U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\nexport function log(...params) {\n    env.log(`${params\n        .map(x => x === undefined ? 'undefined' : x) // Stringify undefined\n        .map(x => typeof (x) === 'object' ? JSON.stringify(x) : x) // Convert Objects to strings\n        .join(' ')}` // Convert to string\n    );\n}\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\nexport function blockIndex() {\n    return env.block_index();\n}\nexport function blockHeight() {\n    return blockIndex();\n}\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\nexport function epochHeight() {\n    return env.epoch_height();\n}\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\nexport function usedGas() {\n    return env.used_gas();\n}\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    let ret = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (ret === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\nexport function panic(msg) {\n    if (msg !== undefined) {\n        env.panic(msg);\n    }\n    else {\n        env.panic();\n    }\n}\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function storageRead(key) {\n    let ret = env.storage_read(key, 0);\n    if (ret === 1n) {\n        return env.read_register(0);\n    }\n    else {\n        return null;\n    }\n}\nexport function storageHasKey(key) {\n    let ret = env.storage_has_key(key);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    let ret = env.alt_bn128_pairing_check(value);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function jsvmAccountId() {\n    env.jsvm_account_id(0);\n    return env.read_register(0);\n}\nexport function jsvmJsContractName() {\n    env.jsvm_js_contract_name(0);\n    return env.read_register(0);\n}\nexport function jsvmMethodName() {\n    env.jsvm_method_name(0);\n    return env.read_register(0);\n}\nexport function jsvmArgs() {\n    env.jsvm_args(0);\n    return env.read_register(0);\n}\nexport function jsvmStorageWrite(key, value) {\n    let exist = env.jsvm_storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageRead(key) {\n    let exist = env.jsvm_storage_read(key, 0);\n    if (exist === 1n) {\n        return env.read_register(0);\n    }\n    return null;\n}\nexport function jsvmStorageRemove(key) {\n    let exist = env.jsvm_storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageHasKey(key) {\n    let exist = env.jsvm_storage_has_key(key);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmCallRaw(contractName, method, args) {\n    env.jsvm_call(contractName, method, JSON.stringify(args), 0);\n    return env.read_register(0);\n}\nexport function jsvmCall(contractName, method, args) {\n    let ret = jsvmCallRaw(contractName, method, args);\n    if (ret === null) {\n        return ret;\n    }\n    return JSON.parse(ret);\n}\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\nexport function jsvmValueReturn(value) {\n    env.jsvm_value_return(value);\n}\n// Standalone only APIs\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\nexport function storageUsage() {\n    return env.storage_usage();\n}\nexport function accountBalance() {\n    return env.account_balance();\n}\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\nexport function valueReturn(value) {\n    env.value_return(value);\n}\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\nexport function promiseAnd(...promiseIndex) {\n    return env.promise_and(...promiseIndex);\n}\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\nexport function promiseResult(resultIdx) {\n    let status = env.promise_result(resultIdx, 0);\n    if (status == PromiseResult.Successful) {\n        return env.read_register(0);\n    }\n    else if (status == PromiseResult.Failed ||\n        status == PromiseResult.NotReady) {\n        return status;\n    }\n    else {\n        panic(`Unexpected return code: ${status}`);\n    }\n}\nexport function promiseReturn(promiseIdx) {\n    env.promise_return(promiseIdx);\n}\nexport function storageWrite(key, value) {\n    let exist = env.storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageRemove(key) {\n    let exist = env.storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n","import * as near from \"./api\";\nexport class NearContract {\n    deserialize() {\n        const rawState = near.storageRead(\"STATE\");\n        if (rawState) {\n            const state = JSON.parse(rawState);\n            // reconstruction of the contract class object from plain object\n            let c = this.default();\n            Object.assign(this, state);\n            for (const item in c) {\n                if (c[item].constructor?.deserialize !== undefined) {\n                    this[item] = c[item].constructor.deserialize(this[item]);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Contract state is empty\");\n        }\n    }\n    serialize() {\n        near.storageWrite(\"STATE\", JSON.stringify(this));\n    }\n    static deserializeArgs() {\n        let args = near.input();\n        return JSON.parse(args || \"{}\");\n    }\n    static serializeReturn(ret) {\n        return JSON.stringify(ret);\n    }\n    init() { }\n}\n","import * as near from '../api';\nexport class LookupMap {\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    containsKey(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return near.storageHasKey(storageKey);\n    }\n    get(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let raw = near.storageRead(storageKey);\n        if (raw !== null) {\n            return JSON.parse(raw);\n        }\n        return null;\n    }\n    remove(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        if (near.storageRemove(storageKey)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    set(key, value) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let storageValue = JSON.stringify(value);\n        if (near.storageWrite(storageKey, storageValue)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    extend(objects) {\n        for (let kv of objects) {\n            this.set(kv[0], kv[1]);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","export function u8ArrayToBytes(array) {\n    let ret = \"\";\n    for (let e of array) {\n        ret += String.fromCharCode(e);\n    }\n    return ret;\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    let ret = new Uint8Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        ret[i] = bytes.charCodeAt(i);\n    }\n    return ret;\n}\nexport function bytes(strOrU8Array) {\n    if (typeof strOrU8Array == \"string\") {\n        return checkStringIsBytes(strOrU8Array);\n    }\n    else if (strOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(strOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(str) {\n    for (let i = 0; i < str.length; i++) {\n        if (str.charCodeAt(i) > 255) {\n            throw new Error(`string ${str} at index ${i}: ${str[i]} is not a valid byte`);\n        }\n    }\n    return str;\n}\nexport function assert(b, str) {\n    if (b) {\n        return;\n    }\n    else {\n        throw Error(\"assertion failed: \" + str);\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes } from \"../utils\";\nconst ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nfunction indexToKey(prefix, index) {\n    let data = new Uint32Array([index]);\n    let array = new Uint8Array(data.buffer);\n    let key = u8ArrayToBytes(array);\n    return prefix + key;\n}\n/// An iterable implementation of vector that stores its content on the trie.\n/// Uses the following map: index -> element\nexport class Vector {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n    }\n    len() {\n        return this.length;\n    }\n    isEmpty() {\n        return this.length == 0;\n    }\n    get(index) {\n        if (index >= this.length) {\n            return null;\n        }\n        let storageKey = indexToKey(this.prefix, index);\n        return JSON.parse(near.storageRead(storageKey));\n    }\n    /// Removes an element from the vector and returns it in serialized form.\n    /// The removed element is replaced by the last element of the vector.\n    /// Does not preserve ordering, but is `O(1)`.\n    swapRemove(index) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else if (index + 1 == this.length) {\n            return this.pop();\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            let last = this.pop();\n            if (near.storageWrite(key, JSON.stringify(last))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    push(element) {\n        let key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWrite(key, JSON.stringify(element));\n    }\n    pop() {\n        if (this.isEmpty()) {\n            return null;\n        }\n        else {\n            let lastIndex = this.length - 1;\n            let lastKey = indexToKey(this.prefix, lastIndex);\n            this.length -= 1;\n            if (near.storageRemove(lastKey)) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    replace(index, element) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            if (near.storageWrite(key, JSON.stringify(element))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    clear() {\n        for (let i = 0; i < this.length; i++) {\n            let key = indexToKey(this.prefix, i);\n            near.storageRemove(key);\n        }\n        this.length = 0;\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let vector = new Vector(data.prefix);\n        vector.length = data.length;\n        return vector;\n    }\n}\nexport class VectorIterator {\n    constructor(vector) {\n        this.current = 0;\n        this.vector = vector;\n    }\n    next() {\n        if (this.current < this.vector.len()) {\n            let value = this.vector.get(this.current);\n            this.current += 1;\n            return { value, done: false };\n        }\n        return { value: null, done: true };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedMap {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n        this.keyIndexPrefix = prefix + \"i\";\n        let indexKey = prefix + \"k\";\n        let indexValue = prefix + \"v\";\n        this.keys = new Vector(indexKey);\n        this.values = new Vector(indexValue);\n    }\n    len() {\n        let keysLen = this.keys.len();\n        let valuesLen = this.values.len();\n        if (keysLen != valuesLen) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return keysLen;\n    }\n    isEmpty() {\n        let keysIsEmpty = this.keys.isEmpty();\n        let valuesIsEmpty = this.values.isEmpty();\n        if (keysIsEmpty != valuesIsEmpty) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return keysIsEmpty;\n    }\n    serializeIndex(index) {\n        let data = new Uint32Array([index]);\n        let array = new Uint8Array(data.buffer);\n        return u8ArrayToBytes(array);\n    }\n    deserializeIndex(rawIndex) {\n        let array = bytesToU8Array(rawIndex);\n        let data = new Uint32Array(array.buffer);\n        return data[0];\n    }\n    getIndexRaw(key) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        return indexRaw;\n    }\n    get(key) {\n        let indexRaw = this.getIndexRaw(key);\n        if (indexRaw) {\n            let index = this.deserializeIndex(indexRaw);\n            let value = this.values.get(index);\n            if (value) {\n                return value;\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n        return null;\n    }\n    set(key, value) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            let index = this.deserializeIndex(indexRaw);\n            return this.values.replace(index, value);\n        }\n        else {\n            let nextIndex = this.len();\n            let nextIndexRaw = this.serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.keys.push(key);\n            this.values.push(value);\n            return null;\n        }\n    }\n    remove(key) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.len() == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastKey = this.keys.get(this.len() - 1);\n                if (!lastKey) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastKey != key) {\n                    let lastLookupKey = this.keyIndexPrefix + JSON.stringify(lastKey);\n                    near.storageWrite(lastLookupKey, indexRaw);\n                }\n            }\n            let index = this.deserializeIndex(indexRaw);\n            this.keys.swapRemove(index);\n            return this.values.swapRemove(index);\n        }\n        return null;\n    }\n    clear() {\n        for (let key of this.keys) {\n            let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n            near.storageRemove(indexLookup);\n        }\n        this.keys.clear();\n        this.values.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    extend(kvs) {\n        for (let [k, v] of kvs) {\n            this.set(k, v);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let map = new UnorderedMap(data.prefix);\n        // reconstruct UnorderedMap\n        map.length = data.length;\n        // reconstruct keys Vector\n        map.keys = new Vector(data.prefix + \"k\");\n        map.keys.length = data.keys.length;\n        // reconstruct values Vector\n        map.values = new Vector(data.prefix + \"v\");\n        map.values.length = data.values.length;\n        return map;\n    }\n}\nclass UnorderedMapIterator {\n    constructor(unorderedMap) {\n        this.keys = new VectorIterator(unorderedMap.keys);\n        this.values = new VectorIterator(unorderedMap.values);\n    }\n    next() {\n        let key = this.keys.next();\n        let value = this.values.next();\n        if (key.done != value.done) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return { value: [key.value, value.value], done: key.done };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedSet {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n        this.elementIndexPrefix = prefix + \"i\";\n        let elementsPrefix = prefix + \"e\";\n        this.elements = new Vector(elementsPrefix);\n    }\n    len() {\n        return this.elements.len();\n    }\n    isEmpty() {\n        return this.elements.isEmpty();\n    }\n    serializeIndex(index) {\n        let data = new Uint32Array([index]);\n        let array = new Uint8Array(data.buffer);\n        return u8ArrayToBytes(array);\n    }\n    deserializeIndex(rawIndex) {\n        let array = bytesToU8Array(rawIndex);\n        let data = new Uint32Array(array.buffer);\n        return data[0];\n    }\n    contains(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        return near.storageHasKey(indexLookup);\n    }\n    set(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        if (near.storageRead(indexLookup)) {\n            return false;\n        }\n        else {\n            let nextIndex = this.len();\n            let nextIndexRaw = this.serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.elements.push(element);\n            return true;\n        }\n    }\n    remove(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.len() == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastElement = this.elements.get(this.len() - 1);\n                if (!lastElement) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastElement != element) {\n                    let lastLookupElement = this.elementIndexPrefix + JSON.stringify(lastElement);\n                    near.storageWrite(lastLookupElement, indexRaw);\n                }\n            }\n            let index = this.deserializeIndex(indexRaw);\n            this.elements.swapRemove(index);\n            return true;\n        }\n        return false;\n    }\n    clear() {\n        for (let element of this.elements) {\n            let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n            near.storageRemove(indexLookup);\n        }\n        this.elements.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return this.elements[Symbol.iterator]();\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.set(element);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let set = new UnorderedSet(data.prefix);\n        // reconstruct UnorderedSet\n        set.length = data.length;\n        // reconstruct Vector\n        let elementsPrefix = data.prefix + \"e\";\n        set.elements = new Vector(elementsPrefix);\n        set.elements.length = data.elements.length;\n        return set;\n    }\n}\n","import { Contract } from \"./nftcontract\";\n\n//defines the payout type we'll be returning as a part of the royalty standards.\nexport class Payout {\n  payout: { [accountId: string]: bigint };\n  constructor({ payout }: { payout: { [accountId: string]: bigint } }) {\n    this.payout = payout;\n  }\n}\n\nexport class NFTContractMetadata {\n  spec: string;\n  name: string;\n  symbol: string;\n  icon?: string;\n  base_uri?: string;\n  reference?: string;\n  reference_hash?: string;\n\n  constructor({\n    spec,\n    name,\n    symbol,\n    icon,\n    baseUri,\n    reference,\n    referenceHash,\n  }: {\n    spec: string;\n    name: string;\n    symbol: string;\n    icon?: string;\n    baseUri?: string;\n    reference?: string;\n    referenceHash?: string;\n  }) {\n    this.spec = spec; // required, essentially a version like \"nft-1.0.0\"\n    this.name = name; // required, ex. \"Mosaics\"\n    this.symbol = symbol; // required, ex. \"MOSAIC\"\n    this.icon = icon; // Data URL\n    this.base_uri = baseUri; // Centralized gateway known to have reliable access to decentralized storage assets referenced by `reference` or `media` URLs\n    this.reference = reference; // URL to a JSON file with more info\n    this.reference_hash = referenceHash; // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.\n  }\n}\n\nexport class TokenMetadata {\n  title?: string;\n  description?: string;\n  media?: string;\n  media_hash?: string;\n  copies?: number;\n  issued_at?: string;\n  expires_at?: string;\n  starts_at?: string;\n  updated_at?: string;\n  extra?: string;\n  reference?: string;\n  reference_hash?: string;\n\n  constructor({\n    title,\n    description,\n    media,\n    mediaHash,\n    copies,\n    issuedAt,\n    expiresAt,\n    startsAt,\n    updatedAt,\n    extra,\n    reference,\n    referenceHash,\n  }: {\n    title?: string;\n    description?: string;\n    media?: string;\n    mediaHash?: string;\n    copies?: number;\n    issuedAt?: string;\n    expiresAt?: string;\n    startsAt?: string;\n    updatedAt?: string;\n    extra?: string;\n    reference?: string;\n    referenceHash?: string;\n  }) {\n    this.title = title; // ex. \"Arch Nemesis: Mail Carrier\" or \"Parcel #5055\"\n    this.description = description; // free-form description\n    this.media = media; // URL to associated media, preferably to decentralized, content-addressed storage\n    this.media_hash = mediaHash; // Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.\n    this.copies = copies; // number of copies of this set of metadata in existence when token was minted.\n    this.issued_at = issuedAt; // ISO 8601 datetime when token was issued or minted\n    this.expires_at = expiresAt; // ISO 8601 datetime when token expires\n    this.starts_at = startsAt; // ISO 8601 datetime when token starts being valid\n    this.updated_at = updatedAt; // ISO 8601 datetime when token was last updated\n    this.extra = extra; // anything extra the NFT wants to store on-chain. Can be stringified JSON.\n    this.reference = reference; // URL to an off-chain JSON file with more info.\n    this.reference_hash = referenceHash; // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.\n  }\n}\n\nexport class Token {\n  owner_id: string;\n  approved_account_ids: { [accountId: string]: number };\n  next_approval_id: number;\n  royalty: { [accountId: string]: number };\n\n  constructor({\n    ownerId,\n    approvedAccountIds,\n    nextApprovalId,\n    royalty,\n  }: {\n    ownerId: string;\n    approvedAccountIds: { [accountId: string]: number };\n    nextApprovalId: number;\n    royalty: { [accountId: string]: number };\n  }) {\n    //owner of the token\n    (this.owner_id = ownerId),\n      //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID\n      (this.approved_account_ids = approvedAccountIds),\n      //the next approval ID to give out.\n      (this.next_approval_id = nextApprovalId),\n      //keep track of the royalty percentages for the token in a hash map\n      (this.royalty = royalty);\n  }\n}\n\n//The Json token is what will be returned from view calls.\nexport class JsonToken {\n  token_id: string;\n  owner_id: string;\n  metadata: TokenMetadata;\n  approved_account_ids: { [accountId: string]: number };\n  royalty: { [accountId: string]: number };\n\n  constructor({\n    tokenId,\n    ownerId,\n    metadata,\n    approvedAccountIds,\n    royalty,\n  }: {\n    tokenId: string;\n    ownerId: string;\n    metadata: TokenMetadata;\n    approvedAccountIds: { [accountId: string]: number };\n    royalty: { [accountId: string]: number };\n  }) {\n    //token ID\n    (this.token_id = tokenId),\n      //owner of the token\n      (this.owner_id = ownerId),\n      //token metadata\n      (this.metadata = metadata),\n      //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID\n      (this.approved_account_ids = approvedAccountIds),\n      //keep track of the royalty percentages for the token in a hash map\n      (this.royalty = royalty);\n  }\n}\n\n//get the information for a specific token ID\nexport function internalNftMetadata({\n  contract,\n}: {\n  contract: Contract;\n}): NFTContractMetadata {\n  return contract.metadata;\n}\n","import { UnorderedSet, Vector, assert, near } from \"near-sdk-js\";\nimport { Contract } from \"./nftcontract\";\nimport { Token } from \"./metadata\";\nimport { NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \"./mint\";\n\nexport function restoreOwners(collection) {\n  if (!collection || typeof collection !== \"object\" || !collection.prefix) {\n    return null;\n  }\n  return UnorderedSet.deserialize(collection as UnorderedSet);\n}\n\nexport function internalAddTokenToOwner(\n  contract: Contract,\n  accountId: string,\n  tokenId: string\n) {\n  // Ensure consistency in how you create new UnorderedSets\n  let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n  // if (tokenSet) {\n  //   const updatedTokens = tokenSet.concat(tokenId);\n  //   contract.tokensPerOwner.set(accountId, updatedTokens);\n  // }\n\n  if (!tokenSet) {\n    tokenSet = new UnorderedSet(\"tokensPerOwner\" + accountId.toString());\n  }\n\n  // Insert the token ID into the set\n  tokenSet.set(tokenId);\n\n  // Save the set back to the contract storage\n  contract.tokensPerOwner.set(accountId, tokenSet);\n}\n\n//remove a token from an owner (internal method and can't be called directly via CLI).\nexport function internalRemoveTokenFromOwner(\n  contract: Contract,\n  accountId: string,\n  tokenId: string\n) {\n  //we get the set of tokens that the owner has\n  let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n  //if there is no set of tokens for the owner, we panic with the following message:\n  if (tokenSet == null) {\n    near.panic(\"Token should be owned by the sender\");\n  }\n\n  //we remove the the token_id from the set of tokens\n  tokenSet.remove(tokenId);\n\n  //if the token set is now empty, we remove the owner from the tokens_per_owner collection\n  if (tokenSet.isEmpty()) {\n    contract.tokensPerOwner.remove(accountId);\n  } else {\n    //if the token set is not empty, we simply insert it back for the account ID.\n    contract.tokensPerOwner.set(accountId, tokenSet);\n  }\n}\n\n//transfers the NFT to the receiver_id (internal method and can't be called directly via CLI).\nexport function internalTransfer(\n  contract: Contract,\n  senderId: string,\n  receiverId: string,\n  tokenId: string,\n  approvalId: number,\n  memo: string\n): Token {\n  //get the token object by passing in the token_id\n  let token = contract.tokensById.get(tokenId) as Token;\n  if (token == null) {\n    near.panic(\"no token found\");\n  }\n\n  //if the sender doesn't equal the owner, we check if the sender is in the approval list\n  if (senderId != token.owner_id) {\n    //if the token's approved account IDs doesn't contain the sender, we panic\n    if (!token.approved_account_ids.hasOwnProperty(senderId)) {\n      near.panic(`Unauthorized for ${senderId}`);\n    }\n\n    // If they included an approval_id, check if the sender's actual approval_id is the same as the one included\n    if (approvalId != null) {\n      //get the actual approval ID\n      let actualApprovalId = token.approved_account_ids[senderId];\n      //if the sender isn't in the map, we panic\n      if (actualApprovalId == null) {\n        near.panic(\"Sender is not approved account\");\n      }\n\n      //make sure that the actual approval ID is the same as the one provided\n      assert(\n        actualApprovalId == approvalId,\n        `The actual approval_id ${actualApprovalId} is different from the given approval_id ${approvalId}`\n      );\n    }\n  }\n\n  //we make sure that the sender isn't sending the token to themselves\n  assert(\n    token.owner_id != receiverId,\n    \"The token owner and the receiver should be different\"\n  );\n\n  //we remove the token from it's current owner's set\n  internalRemoveTokenFromOwner(contract, token.owner_id, tokenId);\n  //we then add the token to the receiver_id's set\n  internalAddTokenToOwner(contract, receiverId, tokenId);\n\n  //we create a new token struct\n  let newToken = new Token({\n    ownerId: receiverId,\n    //reset the approval account IDs\n    approvedAccountIds: { \"marketplace.yusufdimari.testnet\": 1 },\n    nextApprovalId: token.next_approval_id,\n    //we copy over the royalties from the previous token\n    royalty: token.royalty,\n  });\n\n  //insert that new token into the tokens_by_id, replacing the old entry\n  contract.tokensById.set(tokenId, newToken);\n\n  //if there was some memo attached, we log it.\n  if (memo != null) {\n    near.log(`Memo: ${memo}`);\n  }\n\n  // Default the authorized ID to be None for the logs.\n  let authorizedId;\n\n  //if the approval ID was provided, set the authorized ID equal to the sender\n  if (approvalId != null) {\n    authorizedId = senderId;\n  }\n\n  // Construct the transfer log as per the events standard.\n  let nftTransferLog = {\n    // Standard name (\"nep171\").\n    standard: NFT_STANDARD_NAME,\n    // Version of the standard (\"nft-1.0.0\").\n    version: NFT_METADATA_SPEC,\n    // The data related with the event stored in a vector.\n    event: \"nft_transfer\",\n    data: [\n      {\n        // The optional authorized account ID to transfer the token on behalf of the old owner.\n        authorized_id: authorizedId,\n        // The old owner's account ID.\n        old_owner_id: token.owner_id,\n        // The account ID of the new owner of the token.\n        new_owner_id: receiverId,\n        // A vector containing the token IDs as strings.\n        token_ids: [tokenId],\n        // An optional memo to include.\n        memo,\n      },\n    ],\n  };\n\n  // Log the serialized json.\n  near.log(JSON.stringify(nftTransferLog));\n\n  //return the previous token object that was transferred.\n  return token;\n}\n\n//transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance.\nexport function internalNftTransferPayout({\n  contract,\n  receiverId,\n  tokenId,\n  approvalId,\n  memo,\n  balance,\n  maxLenPayout,\n}: {\n  contract: Contract;\n  receiverId: string;\n  tokenId: string;\n  approvalId: number;\n  memo: string;\n  balance: bigint;\n  maxLenPayout: number;\n}): { payout: { [key: string]: string } } {\n  //assert that the user attached 1 yocto NEAR for security reasons\n  assertOneYocto();\n  //get the sender ID\n  let senderId = near.predecessorAccountId();\n  //transfer the token to the passed in receiver and get the previous token object back\n  let previousToken: Token = internalTransfer(\n    contract,\n    senderId,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo\n  );\n\n  //refund the previous token owner for the storage used up by the previous approved account IDs\n  refundApprovedAccountIds(\n    previousToken.owner_id,\n    previousToken.approved_account_ids\n  );\n\n  //get the owner of the token\n  let ownerId = previousToken.owner_id;\n  //keep track of the total perpetual royalties\n  let totalPerpetual = 0;\n  //keep track of the payout object to send back\n  let payoutObj: { [key: string]: string } = {};\n  //get the royalty object from token\n  let royalty = previousToken.royalty;\n\n  //make sure we're not paying out to too many people (GAS limits this)\n  assert(\n    Object.keys(royalty).length <= maxLenPayout,\n    \"Market cannot payout to that many receivers\"\n  );\n\n  //go through each key and value in the royalty object\n  Object.entries(royalty).forEach(([key, value], index) => {\n    //only insert into the payout if the key isn't the token owner (we add their payout at the end)\n    if (key != ownerId) {\n      payoutObj[key] = royaltyToPayout(value, balance);\n      totalPerpetual += value;\n    }\n  });\n\n  // payout to previous owner who gets 100% - total perpetual royalties\n  payoutObj[ownerId] = royaltyToPayout(10000 - totalPerpetual, balance);\n\n  //return the payout object\n  return {\n    payout: payoutObj,\n  };\n}\n\nexport function assertOneYocto() {\n  assert(\n    near.attachedDeposit().toString() === \"1\",\n    \"Requires attached deposit of exactly 1 yoctoNEAR\"\n  );\n}\n\n//convert the royalty percentage and amount to pay into a payout (U128)\nexport function royaltyToPayout(\n  royaltyPercentage: number,\n  amountToPay: bigint\n): string {\n  return (\n    (BigInt(royaltyPercentage) * BigInt(amountToPay)) /\n    BigInt(10000)\n  ).toString();\n}\n\n//refund the storage taken up by passed in approved account IDs and send the funds to the passed in account ID.\nexport function refundApprovedAccountIdsIter(\n  accountId: string,\n  approvedAccountIds: string[]\n) {\n  //get the storage total by going through and summing all the bytes for each approved account IDs\n  let storageReleased = approvedAccountIds\n    .map((e) => bytesForApprovedAccountId(e))\n    .reduce((partialSum, a) => partialSum + a, 0);\n  let amountToTransfer =\n    BigInt(storageReleased) * near.storageByteCost().valueOf();\n\n  // Send the money to the beneficiary (TODO: don't use batch actions)\n  const promise = near.promiseBatchCreate(accountId);\n  near.promiseBatchActionTransfer(promise, amountToTransfer);\n}\n\n//refund a map of approved account IDs and send the funds to the passed in account ID\nexport function refundApprovedAccountIds(\n  accountId: string,\n  approvedAccountIds: { [key: string]: number }\n) {\n  //call the refundApprovedAccountIdsIter with the approved account IDs as keys\n  refundApprovedAccountIdsIter(accountId, Object.keys(approvedAccountIds));\n}\n\n//calculate how many bytes the account ID is taking up\nexport function bytesForApprovedAccountId(accountId: string): number {\n  // The extra 4 bytes are coming from Borsh serialization to store the length of the string.\n  return accountId.length + 4 + 8;\n}\n\nexport function refundDeposit(storageUsed: bigint) {\n  //get how much it would cost to store the information\n  let requiredCost = storageUsed * near.storageByteCost().valueOf();\n  //get the attached deposit\n  let attachedDeposit = near.attachedDeposit().valueOf();\n\n  //make sure that the attached deposit is greater than or equal to the required cost\n  assert(\n    requiredCost <= attachedDeposit,\n    `Must attach ${requiredCost} yoctoNEAR to cover storage`\n  );\n\n  //get the refund amount from the attached deposit - required cost\n  let refund = attachedDeposit - requiredCost;\n  near.log(`Refunding ${refund} yoctoNEAR`);\n\n  //if the refund is greater than 1 yocto NEAR, we refund the predecessor that amount\n  if (refund > 1) {\n    // Send the money to the beneficiary (TODO: don't use batch actions)\n    const promise = near.promiseBatchCreate(near.predecessorAccountId());\n    near.promiseBatchActionTransfer(promise, refund);\n  }\n}\n","import { storageUsage } from \"near-sdk-js/lib/api\";\nimport { Contract } from \"./nftcontract\";\nimport { JsonToken, Token, TokenMetadata } from \"./metadata\";\nimport { UnorderedSet, assert, near } from \"near-sdk-js\";\nimport {\n  internalAddTokenToOwner,\n  refundDeposit,\n  restoreOwners,\n} from \"./internal\";\n\nexport const NFT_METADATA_SPEC = \"nft-1.0.0\";\n\n/// This is the name of the NFT standard we're using\nexport const NFT_STANDARD_NAME = \"nep171\";\n\nexport function mintNFT({\n  contract,\n  receiverId,\n  tokenId,\n  metadata,\n  perpetual_royalties,\n}: {\n  contract: Contract;\n  receiverId: string;\n  tokenId: string;\n  metadata: TokenMetadata;\n  perpetual_royalties: { [accountId: string]: number };\n}) {\n  let initialStorageUsage = storageUsage();\n  let royalty: { [accountId: string]: number } = {};\n\n  if (perpetual_royalties != null) {\n    assert(\n      Object.keys(perpetual_royalties).length < 7,\n      \"Cannot add more than 6 perpetual royalty amounts\"\n    );\n    Object.entries(perpetual_royalties).forEach(([account, amount], index) => {\n      royalty[account] = amount;\n    });\n  }\n\n  let token = new Token({\n    ownerId: receiverId,\n    royalty,\n    nextApprovalId: 0,\n    approvedAccountIds: { \"marketplace.yusufdimari.testnet\": 1 },\n  });\n\n  assert(!contract.tokensById.containsKey(tokenId), \"Token already exist\");\n  contract.tokensById.set(tokenId, token);\n  contract.tokenMetadataById.set(tokenId, metadata);\n\n  internalAddTokenToOwner(contract, receiverId, tokenId);\n\n  let nftMintLog = {\n    // Standard name (\"nep171\").\n    standard: NFT_STANDARD_NAME,\n    // Version of the standard (\"nft-1.0.0\").\n    version: NFT_METADATA_SPEC,\n    // The data related with the event stored in a vector.\n    event: \"nft_mint\",\n    data: [\n      {\n        // Owner of the token.\n        owner_id: token.owner_id,\n        // Vector of token IDs that were minted.\n        token_ids: [tokenId],\n      },\n    ],\n  };\n  near.log(`EVENT_JSON:${JSON.stringify(nftMintLog)}`);\n\n  //calculate the required storage which was the used - initial TODO\n  let requiredStorageInBytes =\n    storageUsage().valueOf() - initialStorageUsage.valueOf();\n\n  //refund any excess storage if the user attached too much. Panic if they didn't attach enough to cover the required.\n  refundDeposit(requiredStorageInBytes);\n}\n\nexport function getToken({\n  contract,\n  tokenId,\n}: {\n  contract: Contract;\n  tokenId: string;\n}) {\n  let token = contract.tokensById.get(tokenId) as Token;\n  if (token == null) return null;\n  let metadata = contract.tokenMetadataById.get(tokenId) as TokenMetadata;\n  let jsToken = new JsonToken({\n    metadata: metadata,\n    ownerId: token.owner_id,\n    approvedAccountIds: token.approved_account_ids,\n    royalty: token.royalty,\n    tokenId: tokenId,\n  });\n  return jsToken;\n}\n\nexport function getOwnerTokens({\n  contract,\n  accountId,\n  fromIndex,\n  limit,\n}: {\n  contract: Contract;\n  accountId: string;\n  fromIndex?: string;\n  limit?: string;\n}): JsonToken[] {\n  let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n\n  if (tokenSet == null) {\n    return [];\n  }\n  let start = fromIndex ? parseInt(fromIndex) : 0;\n  let max = limit ? parseInt(limit) : 50;\n  let keys = tokenSet.toArray();\n  let tokens: JsonToken[] = [];\n  for (let i = start; i < max; i++) {\n    if (i >= keys.length) {\n      break;\n    }\n    let token = getToken({ contract, tokenId: keys[i] }) as JsonToken;\n    tokens.push(token);\n  }\n  return tokens;\n}\n\nexport function getTokens({\n  contract,\n  fromIndex,\n  limit,\n}: {\n  contract: Contract;\n  fromIndex?: string;\n  limit?: number;\n}): JsonToken[] {\n  let tokens: any = [];\n  let start = fromIndex ? parseInt(fromIndex) : 0;\n  //take the first \"limit\" elements in the array. If we didn't specify a limit, use 50\n  let max = limit ? limit : 50;\n  let keys = contract.tokenMetadataById.toArray();\n  for (let i = start; i < keys.length && i < start + max; i++) {\n    let jsonToken = getToken({ contract, tokenId: keys[i][0] });\n    tokens.push(jsonToken);\n  }\n  return tokens;\n}\n\nexport function getTokenBatch({\n  contract,\n  token_ids,\n  fromIndex,\n  limit,\n}: {\n  contract: Contract;\n  token_ids: string[];\n  fromIndex?: string;\n  limit?: number;\n}): JsonToken[] {\n  let tokens: JsonToken[] = [];\n  let start = fromIndex ? parseInt(fromIndex) : 0;\n  let max = limit ? limit : 50;\n  if (start < 0 || start >= token_ids.length) {\n    return []; // Return empty array if start is out of bounds\n  }\n  // Limit the tokenIds to the maximum allowed\n  const end = Math.min(start + max, token_ids.length);\n  const tokensToFetch = token_ids.slice(start, end);\n  for (let tokenId of tokensToFetch) {\n    const token = getToken({ contract, tokenId });\n\n    if (token) {\n      tokens.push(token);\n    }\n  }\n\n  return tokens;\n}\n","import {\n  LookupMap,\n  NearBindgen,\n  NearContract,\n  UnorderedMap,\n  call,\n  near,\n  view,\n} from \"near-sdk-js\";\nimport { NFTContractMetadata, Token, TokenMetadata } from \"./metadata\";\nimport { mintNFT, getOwnerTokens, getTokens, getTokenBatch } from \"./mint\";\nimport { internalNftTransferPayout } from \"./internal\";\n\n//@ts-ignore\n@NearBindgen\nexport class Contract extends NearContract {\n  owner_id: string;\n  tokensPerOwner: LookupMap;\n  tokensById: LookupMap;\n  tokenMetadataById: UnorderedMap;\n  metadata: NFTContractMetadata;\n\n  constructor({\n    owner_id,\n    metadata = {\n      spec: \"nft-1.0.0\",\n      name: \"NFT Tutorial Contract\",\n      symbol: \"GOTEAM\",\n    },\n  }) {\n    super();\n    this.metadata = metadata;\n    this.owner_id = owner_id;\n    this.tokensPerOwner = new LookupMap(\"tokensPerOwner\");\n    this.tokensById = new LookupMap(\"tokensById\");\n    this.tokenMetadataById = new UnorderedMap(\"tokensMetadataById\");\n  }\n\n  default() {\n    return new Contract({ owner_id: \"\" });\n  }\n  //@ts-ignore\n  @call\n  nft_mint({ token_id, metadata, receiver_id, perpetual_royalties }) {\n    return mintNFT({\n      contract: this,\n      receiverId: receiver_id,\n      tokenId: token_id,\n      metadata,\n      perpetual_royalties,\n    });\n  }\n  //@ts-ignore\n  @view\n  nft_tokens_for_owner({ account_id, from_index, limit }) {\n    try {\n      return getOwnerTokens({\n        contract: this,\n        accountId: account_id,\n        fromIndex: from_index,\n        limit,\n      });\n    } catch (error) {\n      near.log(`Error occurred: ${error.message}`);\n      return [];\n    }\n  }\n\n  //@ts-ignore\n  @view\n  nft_tokens({ from_index, limit }) {\n    try {\n      return getTokens({ contract: this, fromIndex: from_index, limit });\n    } catch (error) {\n      near.log(`Contract Error occurred: ${error.message}`);\n      return [];\n    }\n  }\n\n  //@ts-ignore\n  @view\n  get_token_batch({ token_ids, from_index, limit }) {\n    try {\n      return getTokenBatch({\n        contract: this,\n        limit,\n        token_ids,\n        fromIndex: from_index,\n      });\n    } catch (error) {\n      near.log(`Contract Error occurred: ${error.message}`);\n      return [];\n    }\n  }\n\n  //for Transfer of Tokens\n  //@ts-ignore\n  @call\n  //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance.\n  nft_transfer_payout({\n    receiver_id,\n    token_id,\n    approval_id,\n    memo,\n    balance,\n    max_len_payout,\n  }) {\n    return internalNftTransferPayout({\n      contract: this,\n      receiverId: receiver_id,\n      tokenId: token_id,\n      approvalId: approval_id,\n      memo: memo,\n      balance: balance,\n      maxLenPayout: max_len_payout,\n    });\n  }\n}\n"],"names":["call","target","key","descriptor","view","NearBindgen","_init","args","deserializeArgs","ret","init","serialize","_get","Object","create","prototype","U64_MAX","EVICTED_REGISTER","log","params","env","map","x","undefined","JSON","stringify","join","predecessorAccountId","predecessor_account_id","read_register","attachedDeposit","attached_deposit","panic","msg","storageRead","storage_read","storageHasKey","storage_has_key","storageGetEvicted","input","storageUsage","storage_usage","promiseBatchCreate","accountId","promise_batch_create","promiseBatchActionTransfer","promiseIndex","amount","promise_batch_action_transfer","PromiseResult","storageWrite","value","exist","storage_write","storageRemove","storage_remove","storageByteCost","NearContract","deserialize","rawState","near","state","parse","c","default","assign","item","constructor","Error","serializeReturn","LookupMap","keyPrefix","containsKey","storageKey","get","raw","remove","set","storageValue","extend","objects","kv","data","u8ArrayToBytes","array","e","String","fromCharCode","bytesToU8Array","bytes","Uint8Array","length","i","charCodeAt","assert","b","str","ERR_INDEX_OUT_OF_BOUNDS","ERR_INCONSISTENT_STATE","indexToKey","prefix","index","Uint32Array","buffer","Vector","len","isEmpty","swapRemove","pop","last","push","element","lastIndex","lastKey","replace","elements","Symbol","iterator","VectorIterator","clear","toArray","v","vector","current","next","done","UnorderedMap","keyIndexPrefix","indexKey","indexValue","keys","values","keysLen","valuesLen","keysIsEmpty","valuesIsEmpty","serializeIndex","deserializeIndex","rawIndex","getIndexRaw","indexLookup","indexRaw","nextIndex","nextIndexRaw","lastLookupKey","UnorderedMapIterator","kvs","k","unorderedMap","UnorderedSet","elementIndexPrefix","elementsPrefix","contains","lastElement","lastLookupElement","Token","ownerId","approvedAccountIds","nextApprovalId","royalty","owner_id","approved_account_ids","next_approval_id","JsonToken","tokenId","metadata","token_id","restoreOwners","collection","internalAddTokenToOwner","contract","tokenSet","tokensPerOwner","toString","internalRemoveTokenFromOwner","internalTransfer","senderId","receiverId","approvalId","memo","token","tokensById","hasOwnProperty","actualApprovalId","newToken","authorizedId","nftTransferLog","standard","NFT_STANDARD_NAME","version","NFT_METADATA_SPEC","event","authorized_id","old_owner_id","new_owner_id","token_ids","internalNftTransferPayout","balance","maxLenPayout","assertOneYocto","previousToken","refundApprovedAccountIds","totalPerpetual","payoutObj","entries","forEach","royaltyToPayout","payout","royaltyPercentage","amountToPay","BigInt","refundApprovedAccountIdsIter","storageReleased","bytesForApprovedAccountId","reduce","partialSum","a","amountToTransfer","valueOf","promise","refundDeposit","storageUsed","requiredCost","refund","mintNFT","perpetual_royalties","initialStorageUsage","account","tokenMetadataById","nftMintLog","requiredStorageInBytes","getToken","jsToken","getOwnerTokens","fromIndex","limit","start","parseInt","max","tokens","getTokens","jsonToken","getTokenBatch","end","Math","min","tokensToFetch","slice","Contract","_class","_class2","spec","name","symbol","nft_mint","receiver_id","nft_tokens_for_owner","account_id","from_index","error","message","nft_tokens","get_token_batch","nft_transfer_payout","approval_id","max_len_payout","_applyDecoratedDescriptor","getOwnPropertyDescriptor","_contract","value_return"],"mappings":"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"}