{"version":3,"file":"tcg-near-marketplace.js","sources":["../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-contract.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/collections/unordered-set.js","../src/marketplace/listing.ts","../src/marketplace/nft_listing.ts","../src/marketplace/internal.ts","../src/marketplace/contract.ts"],"sourcesContent":["export function call(target, key, descriptor) {\n}\nexport function view(target, key, descriptor) {\n}\nexport function NearBindgen(target) {\n    return class extends target {\n        static _init() {\n            // @ts-ignore\n            let args = target.deserializeArgs();\n            let ret = new target(args);\n            // @ts-ignore\n            ret.init();\n            // @ts-ignore\n            ret.serialize();\n            return ret;\n        }\n        static _get() {\n            let ret = Object.create(target.prototype);\n            return ret;\n        }\n    };\n}\n","const U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\nexport function log(...params) {\n    env.log(`${params\n        .map(x => x === undefined ? 'undefined' : x) // Stringify undefined\n        .map(x => typeof (x) === 'object' ? JSON.stringify(x) : x) // Convert Objects to strings\n        .join(' ')}` // Convert to string\n    );\n}\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\nexport function blockIndex() {\n    return env.block_index();\n}\nexport function blockHeight() {\n    return blockIndex();\n}\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\nexport function epochHeight() {\n    return env.epoch_height();\n}\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\nexport function usedGas() {\n    return env.used_gas();\n}\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    let ret = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (ret === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\nexport function panic(msg) {\n    if (msg !== undefined) {\n        env.panic(msg);\n    }\n    else {\n        env.panic();\n    }\n}\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function storageRead(key) {\n    let ret = env.storage_read(key, 0);\n    if (ret === 1n) {\n        return env.read_register(0);\n    }\n    else {\n        return null;\n    }\n}\nexport function storageHasKey(key) {\n    let ret = env.storage_has_key(key);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    let ret = env.alt_bn128_pairing_check(value);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function jsvmAccountId() {\n    env.jsvm_account_id(0);\n    return env.read_register(0);\n}\nexport function jsvmJsContractName() {\n    env.jsvm_js_contract_name(0);\n    return env.read_register(0);\n}\nexport function jsvmMethodName() {\n    env.jsvm_method_name(0);\n    return env.read_register(0);\n}\nexport function jsvmArgs() {\n    env.jsvm_args(0);\n    return env.read_register(0);\n}\nexport function jsvmStorageWrite(key, value) {\n    let exist = env.jsvm_storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageRead(key) {\n    let exist = env.jsvm_storage_read(key, 0);\n    if (exist === 1n) {\n        return env.read_register(0);\n    }\n    return null;\n}\nexport function jsvmStorageRemove(key) {\n    let exist = env.jsvm_storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageHasKey(key) {\n    let exist = env.jsvm_storage_has_key(key);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmCallRaw(contractName, method, args) {\n    env.jsvm_call(contractName, method, JSON.stringify(args), 0);\n    return env.read_register(0);\n}\nexport function jsvmCall(contractName, method, args) {\n    let ret = jsvmCallRaw(contractName, method, args);\n    if (ret === null) {\n        return ret;\n    }\n    return JSON.parse(ret);\n}\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\nexport function jsvmValueReturn(value) {\n    env.jsvm_value_return(value);\n}\n// Standalone only APIs\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\nexport function storageUsage() {\n    return env.storage_usage();\n}\nexport function accountBalance() {\n    return env.account_balance();\n}\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\nexport function valueReturn(value) {\n    env.value_return(value);\n}\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\nexport function promiseAnd(...promiseIndex) {\n    return env.promise_and(...promiseIndex);\n}\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\nexport function promiseResult(resultIdx) {\n    let status = env.promise_result(resultIdx, 0);\n    if (status == PromiseResult.Successful) {\n        return env.read_register(0);\n    }\n    else if (status == PromiseResult.Failed ||\n        status == PromiseResult.NotReady) {\n        return status;\n    }\n    else {\n        panic(`Unexpected return code: ${status}`);\n    }\n}\nexport function promiseReturn(promiseIdx) {\n    env.promise_return(promiseIdx);\n}\nexport function storageWrite(key, value) {\n    let exist = env.storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageRemove(key) {\n    let exist = env.storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n","import * as near from \"./api\";\nexport class NearContract {\n    deserialize() {\n        const rawState = near.storageRead(\"STATE\");\n        if (rawState) {\n            const state = JSON.parse(rawState);\n            // reconstruction of the contract class object from plain object\n            let c = this.default();\n            Object.assign(this, state);\n            for (const item in c) {\n                if (c[item].constructor?.deserialize !== undefined) {\n                    this[item] = c[item].constructor.deserialize(this[item]);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Contract state is empty\");\n        }\n    }\n    serialize() {\n        near.storageWrite(\"STATE\", JSON.stringify(this));\n    }\n    static deserializeArgs() {\n        let args = near.input();\n        return JSON.parse(args || \"{}\");\n    }\n    static serializeReturn(ret) {\n        return JSON.stringify(ret);\n    }\n    init() { }\n}\n","import * as near from '../api';\nexport class LookupMap {\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    containsKey(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return near.storageHasKey(storageKey);\n    }\n    get(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let raw = near.storageRead(storageKey);\n        if (raw !== null) {\n            return JSON.parse(raw);\n        }\n        return null;\n    }\n    remove(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        if (near.storageRemove(storageKey)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    set(key, value) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let storageValue = JSON.stringify(value);\n        if (near.storageWrite(storageKey, storageValue)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    extend(objects) {\n        for (let kv of objects) {\n            this.set(kv[0], kv[1]);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","export function u8ArrayToBytes(array) {\n    let ret = \"\";\n    for (let e of array) {\n        ret += String.fromCharCode(e);\n    }\n    return ret;\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    let ret = new Uint8Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        ret[i] = bytes.charCodeAt(i);\n    }\n    return ret;\n}\nexport function bytes(strOrU8Array) {\n    if (typeof strOrU8Array == \"string\") {\n        return checkStringIsBytes(strOrU8Array);\n    }\n    else if (strOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(strOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(str) {\n    for (let i = 0; i < str.length; i++) {\n        if (str.charCodeAt(i) > 255) {\n            throw new Error(`string ${str} at index ${i}: ${str[i]} is not a valid byte`);\n        }\n    }\n    return str;\n}\nexport function assert(b, str) {\n    if (b) {\n        return;\n    }\n    else {\n        throw Error(\"assertion failed: \" + str);\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes } from \"../utils\";\nconst ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nfunction indexToKey(prefix, index) {\n    let data = new Uint32Array([index]);\n    let array = new Uint8Array(data.buffer);\n    let key = u8ArrayToBytes(array);\n    return prefix + key;\n}\n/// An iterable implementation of vector that stores its content on the trie.\n/// Uses the following map: index -> element\nexport class Vector {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n    }\n    len() {\n        return this.length;\n    }\n    isEmpty() {\n        return this.length == 0;\n    }\n    get(index) {\n        if (index >= this.length) {\n            return null;\n        }\n        let storageKey = indexToKey(this.prefix, index);\n        return JSON.parse(near.storageRead(storageKey));\n    }\n    /// Removes an element from the vector and returns it in serialized form.\n    /// The removed element is replaced by the last element of the vector.\n    /// Does not preserve ordering, but is `O(1)`.\n    swapRemove(index) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else if (index + 1 == this.length) {\n            return this.pop();\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            let last = this.pop();\n            if (near.storageWrite(key, JSON.stringify(last))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    push(element) {\n        let key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWrite(key, JSON.stringify(element));\n    }\n    pop() {\n        if (this.isEmpty()) {\n            return null;\n        }\n        else {\n            let lastIndex = this.length - 1;\n            let lastKey = indexToKey(this.prefix, lastIndex);\n            this.length -= 1;\n            if (near.storageRemove(lastKey)) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    replace(index, element) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            if (near.storageWrite(key, JSON.stringify(element))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    clear() {\n        for (let i = 0; i < this.length; i++) {\n            let key = indexToKey(this.prefix, i);\n            near.storageRemove(key);\n        }\n        this.length = 0;\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let vector = new Vector(data.prefix);\n        vector.length = data.length;\n        return vector;\n    }\n}\nexport class VectorIterator {\n    constructor(vector) {\n        this.current = 0;\n        this.vector = vector;\n    }\n    next() {\n        if (this.current < this.vector.len()) {\n            let value = this.vector.get(this.current);\n            this.current += 1;\n            return { value, done: false };\n        }\n        return { value: null, done: true };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedMap {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n        this.keyIndexPrefix = prefix + \"i\";\n        let indexKey = prefix + \"k\";\n        let indexValue = prefix + \"v\";\n        this.keys = new Vector(indexKey);\n        this.values = new Vector(indexValue);\n    }\n    len() {\n        let keysLen = this.keys.len();\n        let valuesLen = this.values.len();\n        if (keysLen != valuesLen) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return keysLen;\n    }\n    isEmpty() {\n        let keysIsEmpty = this.keys.isEmpty();\n        let valuesIsEmpty = this.values.isEmpty();\n        if (keysIsEmpty != valuesIsEmpty) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return keysIsEmpty;\n    }\n    serializeIndex(index) {\n        let data = new Uint32Array([index]);\n        let array = new Uint8Array(data.buffer);\n        return u8ArrayToBytes(array);\n    }\n    deserializeIndex(rawIndex) {\n        let array = bytesToU8Array(rawIndex);\n        let data = new Uint32Array(array.buffer);\n        return data[0];\n    }\n    getIndexRaw(key) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        return indexRaw;\n    }\n    get(key) {\n        let indexRaw = this.getIndexRaw(key);\n        if (indexRaw) {\n            let index = this.deserializeIndex(indexRaw);\n            let value = this.values.get(index);\n            if (value) {\n                return value;\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n        return null;\n    }\n    set(key, value) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            let index = this.deserializeIndex(indexRaw);\n            return this.values.replace(index, value);\n        }\n        else {\n            let nextIndex = this.len();\n            let nextIndexRaw = this.serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.keys.push(key);\n            this.values.push(value);\n            return null;\n        }\n    }\n    remove(key) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.len() == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastKey = this.keys.get(this.len() - 1);\n                if (!lastKey) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastKey != key) {\n                    let lastLookupKey = this.keyIndexPrefix + JSON.stringify(lastKey);\n                    near.storageWrite(lastLookupKey, indexRaw);\n                }\n            }\n            let index = this.deserializeIndex(indexRaw);\n            this.keys.swapRemove(index);\n            return this.values.swapRemove(index);\n        }\n        return null;\n    }\n    clear() {\n        for (let key of this.keys) {\n            let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n            near.storageRemove(indexLookup);\n        }\n        this.keys.clear();\n        this.values.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    extend(kvs) {\n        for (let [k, v] of kvs) {\n            this.set(k, v);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let map = new UnorderedMap(data.prefix);\n        // reconstruct UnorderedMap\n        map.length = data.length;\n        // reconstruct keys Vector\n        map.keys = new Vector(data.prefix + \"k\");\n        map.keys.length = data.keys.length;\n        // reconstruct values Vector\n        map.values = new Vector(data.prefix + \"v\");\n        map.values.length = data.values.length;\n        return map;\n    }\n}\nclass UnorderedMapIterator {\n    constructor(unorderedMap) {\n        this.keys = new VectorIterator(unorderedMap.keys);\n        this.values = new VectorIterator(unorderedMap.values);\n    }\n    next() {\n        let key = this.keys.next();\n        let value = this.values.next();\n        if (key.done != value.done) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return { value: [key.value, value.value], done: key.done };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedSet {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n        this.elementIndexPrefix = prefix + \"i\";\n        let elementsPrefix = prefix + \"e\";\n        this.elements = new Vector(elementsPrefix);\n    }\n    len() {\n        return this.elements.len();\n    }\n    isEmpty() {\n        return this.elements.isEmpty();\n    }\n    serializeIndex(index) {\n        let data = new Uint32Array([index]);\n        let array = new Uint8Array(data.buffer);\n        return u8ArrayToBytes(array);\n    }\n    deserializeIndex(rawIndex) {\n        let array = bytesToU8Array(rawIndex);\n        let data = new Uint32Array(array.buffer);\n        return data[0];\n    }\n    contains(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        return near.storageHasKey(indexLookup);\n    }\n    set(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        if (near.storageRead(indexLookup)) {\n            return false;\n        }\n        else {\n            let nextIndex = this.len();\n            let nextIndexRaw = this.serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.elements.push(element);\n            return true;\n        }\n    }\n    remove(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.len() == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastElement = this.elements.get(this.len() - 1);\n                if (!lastElement) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastElement != element) {\n                    let lastLookupElement = this.elementIndexPrefix + JSON.stringify(lastElement);\n                    near.storageWrite(lastLookupElement, indexRaw);\n                }\n            }\n            let index = this.deserializeIndex(indexRaw);\n            this.elements.swapRemove(index);\n            return true;\n        }\n        return false;\n    }\n    clear() {\n        for (let element of this.elements) {\n            let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n            near.storageRemove(indexLookup);\n        }\n        this.elements.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return this.elements[Symbol.iterator]();\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.set(element);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let set = new UnorderedSet(data.prefix);\n        // reconstruct UnorderedSet\n        set.length = data.length;\n        // reconstruct Vector\n        let elementsPrefix = data.prefix + \"e\";\n        set.elements = new Vector(elementsPrefix);\n        set.elements.length = data.elements.length;\n        return set;\n    }\n}\n","import { Contract } from \"./contract\";\nimport { restoreOwners } from \"./nft_listing\";\n\nexport class Listing {\n  token_id: string;\n  owner_id: string;\n  approval_id: number;\n  company_id: string;\n  sale_price: string;\n  constructor({\n    token_id,\n    owner_id,\n    approval_id,\n    company_id,\n    sale_price,\n  }: {\n    token_id: string;\n    owner_id: string;\n    approval_id: number;\n    company_id: string;\n    sale_price: string;\n  }) {\n    this.token_id = token_id;\n    this.owner_id = owner_id;\n    this.approval_id = approval_id;\n    this.company_id = company_id;\n    this.sale_price = sale_price;\n  }\n}\n\nexport const get_listings = ({\n  contract,\n}: {\n  contract: Contract;\n}): Listing[] => {\n  const listings: Listing[] = [];\n\n  let keys = contract.listings.keys;\n  for (let key of keys.toArray()) {\n    const listing = contract.listings.get(key as string);\n    if (listing) {\n      listings.push(listing as Listing);\n    }\n  }\n\n  return listings;\n};\n\nexport const get_listings_by_company = ({\n  contract,\n  company_id,\n}: {\n  contract: Contract;\n  company_id: string;\n}) => {\n  const listings = Array.from(\n    restoreOwners(contract.byCompanyId.get(company_id)) || []\n  );\n  return listings;\n};\n\nexport const get_listings_by_owner = ({\n  contract,\n  owner_id,\n}: {\n  contract: Contract;\n  owner_id: string;\n}) => {\n  const listings = Array.from(\n    restoreOwners(contract.byOwnerId.get(owner_id)) || []\n  );\n  return listings;\n};\n","import { UnorderedSet, assert, near } from \"near-sdk-js\";\nimport { Contract } from \"./contract\";\nimport { Listing } from \"./listing\";\n\nexport const list_nft = ({\n  contract,\n  token_id,\n  owner_id,\n  approval_id,\n  company_id,\n  sale_price,\n}: {\n  contract: Contract;\n  token_id: string;\n  owner_id: string;\n  approval_id: number;\n  company_id: string;\n  sale_price: string;\n}) => {\n  const signerId = near.signerAccountId();\n  const contractId = near.predecessorAccountId();\n\n  //make sure the signer isnt the predecessor\n  // assert(\n  //   signerId != contractId,\n  //   \"this function can only be called via a cross-contract call\"\n  // );\n  assert(owner_id == signerId, \"Only the owner can approve this transaction\");\n\n  let listing = new Listing({\n    approval_id,\n    company_id,\n    owner_id,\n    sale_price,\n    token_id,\n  });\n\n  let alreadyExist = contract.listings.get(token_id);\n  assert(!alreadyExist, \"Token already listed in Marketplace\");\n  //add the token to the marketplace listing\n  contract.listings.set(token_id, listing);\n\n  //add the token to the company listing\n  let byCompanyId = restoreOwners(contract.byCompanyId.get(company_id));\n  if (!byCompanyId) {\n    byCompanyId = new UnorderedSet(\"byCompanyId\" + company_id.toString());\n  }\n  byCompanyId.set(token_id);\n  contract.byCompanyId.set(company_id, byCompanyId);\n\n  //add the token to the owner listing\n  let byOwnerId = restoreOwners(contract.byOwnerId.get(owner_id));\n  if (!byOwnerId) {\n    byOwnerId = new UnorderedSet(\"byOwnerId\" + owner_id.toString());\n  }\n  byOwnerId.set(token_id);\n  contract.byOwnerId.set(owner_id, byOwnerId);\n\n  return {\n    success: true,\n  };\n};\n\nexport function restoreOwners(collection) {\n  if (!collection || typeof collection !== \"object\" || !collection.prefix) {\n    return null;\n  }\n  return UnorderedSet.deserialize(collection as UnorderedSet);\n}\n","import { panic } from \"near-sdk-js/lib/api\";\nimport { Contract } from \"./contract\";\nimport { Listing } from \"./listing\";\nimport { restoreOwners } from \"./nft_listing\";\nimport { assert, bytes, near } from \"near-sdk-js\";\n\nconst GAS_FOR_ROYALTIES = 115_000_000_000_000;\nconst GAS_FOR_NFT_TRANSFER = 15_000_000_000_000;\n\nexport function internalRemoveListings({\n  contract,\n  listings,\n}: {\n  contract: Contract;\n  listings: string[];\n}) {\n  let tokens: Listing[] = [];\n\n  for (let key in listings) {\n    let tokenId = listings[key];\n    let listing = contract.listings.remove(tokenId) as Listing;\n    if (listing == null) panic(\"No listing\");\n\n    let byOwnerId = restoreOwners(contract.byOwnerId.get(listing.owner_id));\n    if (byOwnerId == null) panic(\"No Listing by Owner\");\n    byOwnerId.remove(tokenId);\n\n    if (byOwnerId.isEmpty()) {\n      contract.byOwnerId.remove(listing.owner_id);\n    } else {\n      contract.byOwnerId.set(listing.owner_id, byOwnerId);\n    }\n\n    let byCompanyId = restoreOwners(\n      contract.byCompanyId.get(listing.company_id)\n    );\n    if (byCompanyId == null) panic(\"No Listing by Company\");\n    byCompanyId.remove(listing.token_id);\n\n    if (byCompanyId.isEmpty()) {\n      contract.byCompanyId.remove(listing.company_id);\n    } else {\n      contract.byCompanyId.set(listing.company_id, byCompanyId);\n    }\n    tokens.push(listing);\n  }\n  return { success: true, sales: tokens };\n}\n\n//place an offer on a specific sale. The sale will go through as long as your deposit is greater than or equal to the list price\nexport function internalOffer({\n  contract,\n  nftContractId,\n  tokenId,\n}: {\n  contract: Contract;\n  nftContractId: string;\n  tokenId: string;\n}) {\n  //get the attached deposit and make sure it's greater than 0\n  let deposit = near.attachedDeposit().valueOf();\n  assert(deposit > 0, \"deposit must be greater than 0\");\n\n  // //get the unique sale ID (contract + DELIMITER + token ID)\n  // let contractAndTokenId = `${nftContractId}.${tokenId}`;\n  // near.log(\"contractAndTokenId\", contractAndTokenId);\n  //get the sale object from the unique sale ID. If the sale doesn't exist, panic.\n  let listing = contract.listings.get(tokenId) as Listing;\n  if (listing == null) {\n    near.panic(\"no sale\");\n  }\n\n  //get the buyer ID which is the person who called the function and make sure they're not the owner of the sale\n  let buyerId = near.predecessorAccountId();\n  assert(buyerId != listing.owner_id, \"you can't offer on your own sale\");\n\n  //get the u128 price of the token (dot 0 converts from U128 to u128)\n  let price = BigInt(listing.sale_price);\n  //make sure the deposit is greater than the price\n  assert(deposit >= price, \"deposit must be greater than or equal to price\");\n\n  //process the purchase (which will remove the sale, transfer and get the payout from the nft contract, and then distribute royalties)\n  processPurchase({\n    contract,\n    nftContractId,\n    tokenId,\n    price: deposit.toString(),\n    buyerId,\n  });\n}\n\n//private function used when a sale is purchased.\n//this will remove the sale, transfer and get the payout from the nft contract, and then distribute royalties\nexport function processPurchase({\n  contract,\n  nftContractId,\n  tokenId,\n  price,\n  buyerId,\n}: {\n  contract: Contract;\n  nftContractId: string;\n  tokenId: string;\n  price: string;\n  buyerId: string;\n}) {\n  //get the sale object by removing the sale\n  let { sales } = internalRemoveListings({ contract, listings: [tokenId] });\n  let sale = sales[0];\n\n  //initiate a cross contract call to the nft contract. This will transfer the token to the buyer and return\n  //a payout object used for the market to distribute funds to the appropriate accounts.\n  const promise = near.promiseBatchCreate(nftContractId);\n  near.promiseBatchActionFunctionCall(\n    promise,\n    \"nft_transfer_payout\",\n    bytes(\n      JSON.stringify({\n        receiver_id: buyerId, //purchaser (person to transfer the NFT to)\n        token_id: tokenId, //token ID to transfer\n        approval_id: sale.approval_id, //market contract's approval ID in order to transfer the token on behalf of the owner\n        memo: \"payout from market\", //memo (to include some context)\n        /*\n                    the price that the token was purchased for. This will be used in conjunction with the royalty percentages\n                    for the token in order to determine how much money should go to which account. \n                */\n        balance: price,\n        max_len_payout: 10, //the maximum amount of accounts the market can payout at once (this is limited by GAS)\n      })\n    ),\n    1, // 1 yoctoNEAR\n    GAS_FOR_NFT_TRANSFER\n  );\n\n  //after the transfer payout has been initiated, we resolve the promise by calling our own resolve_purchase function.\n  //resolve purchase will take the payout object returned from the nft_transfer_payout and actually pay the accounts\n  near.promiseThen(\n    promise,\n    near.currentAccountId(),\n    \"resolve_purchase\",\n    bytes(\n      JSON.stringify({\n        buyer_id: buyerId, //the buyer and price are passed in incase something goes wrong and we need to refund the buyer\n        price: price,\n      })\n    ),\n    0, // no deposit\n    GAS_FOR_ROYALTIES\n  );\n  return near.promiseReturn(promise);\n}\n\nexport function internalResolvePurchase({\n  buyerId,\n  price,\n}: {\n  buyerId: string;\n  price: string;\n}) {\n  assert(\n    near.currentAccountId() === near.predecessorAccountId(),\n    \"Only the contract itself can call this method\"\n  );\n\n  // checking for payout information returned from the nft_transfer_payout method\n  let result = near.promiseResult(0);\n  let payout = null;\n  if (typeof result === \"string\") {\n    //if we set the payout_option to None, that means something went wrong and we should refund the buyer\n\n    try {\n      let payoutOption = JSON.parse(result);\n      if (\n        Object.keys(payoutOption.payout).length > 10 ||\n        Object.keys(payoutOption.payout).length < 1\n      ) {\n        //we'll check if length of the payout object is > 10 or it's empty. In either case, we return None\n        throw \"Cannot have more than 10 royalties\";\n        //if the payout object is the correct length, we move forward\n      } else {\n        //we'll keep track of how much the nft contract wants us to payout. Starting at the full price payed by the buyer\n        let remainder = BigInt(price);\n        //loop through the payout and subtract the values from the remainder.\n        Object.entries(payoutOption.payout).forEach(([key, value], index) => {\n          remainder = remainder - BigInt(value as string);\n        });\n\n        //Check to see if the NFT contract sent back a faulty payout that requires us to pay more or too little.\n        //The remainder will be 0 if the payout summed to the total price. The remainder will be 1 if the royalties\n        //we something like 3333 + 3333 + 3333.\n        if (remainder == BigInt(0) || remainder == BigInt(1)) {\n          //set the payout because nothing went wrong\n          payout = payoutOption.payout;\n        } else {\n          //if the remainder was anything but 1 or 0, we return None\n          throw \"Payout is not correct\";\n        }\n      }\n    } catch (e) {\n      near.log(`error parsing payout object ${result}`);\n      payout = null;\n    }\n  }\n\n  //if the payout was null, we refund the buyer for the price they payed and return\n  if (payout == null) {\n    const promise = near.promiseBatchCreate(buyerId);\n    near.promiseBatchActionTransfer(promise, BigInt(price));\n    return price;\n  }\n  // NEAR payouts\n  for (let [key, value] of Object.entries(payout)) {\n    const promise = near.promiseBatchCreate(key);\n    near.promiseBatchActionTransfer(promise, BigInt(value as string));\n  }\n\n  //return the price payout out\n  return price;\n}\n","import {\n  LookupMap,\n  NearBindgen,\n  NearContract,\n  UnorderedMap,\n  call,\n  near,\n  view,\n} from \"near-sdk-js\";\nimport { list_nft } from \"./nft_listing\";\nimport {\n  get_listings,\n  get_listings_by_company,\n  get_listings_by_owner,\n} from \"./listing\";\nimport {\n  internalOffer,\n  internalRemoveListings,\n  internalResolvePurchase,\n} from \"./internal\";\n\n//@ts-ignore\n@NearBindgen\nexport class Contract extends NearContract {\n  ownerId: string;\n  listings: UnorderedMap;\n  byOwnerId: LookupMap;\n  byCompanyId: LookupMap;\n  storageDeposits: LookupMap;\n\n  constructor({ owner_id }: { owner_id: string }) {\n    super();\n    this.ownerId = owner_id;\n    this.listings = new UnorderedMap(\"listings\");\n    this.byOwnerId = new LookupMap(\"byOwnerId\");\n    this.byCompanyId = new LookupMap(\"byCompanyId\");\n    this.storageDeposits = new LookupMap(\"storageDeposits\");\n  }\n\n  default() {\n    return new Contract({ owner_id: \"\" });\n  }\n\n  //@ts-ignore\n  @call\n  //list the nft for sale in marketPlace\n  nft_list({ token_id, owner_id, approval_id, company_id, sale_price }) {\n    return list_nft({\n      contract: this,\n      token_id,\n      owner_id,\n      approval_id,\n      company_id,\n      sale_price,\n    });\n  }\n\n  //@ts-ignore\n  @call\n  nft_unlist({ listings }) {\n    return internalRemoveListings({\n      contract: this,\n      listings,\n    });\n  }\n\n  //@ts-ignore\n  @view\n  get_all_listings() {\n    return get_listings({ contract: this });\n  }\n  //@ts-ignore\n  @view\n  get_company_listings({ company_id }) {\n    return get_listings_by_company({ contract: this, company_id });\n  }\n  //@ts-ignore\n  @view\n  get_owner_listings({ owner_id }) {\n    return get_listings_by_owner({ contract: this, owner_id });\n  }\n\n  //Transfer of NFT\n  //@ts-ignore\n  @call\n  //place an offer on a specific sale. The sale will go through as long as your deposit is greater than or equal to the list price\n  offer({\n    nft_contract_id,\n    token_id,\n  }: {\n    nft_contract_id: string;\n    token_id: string;\n  }) {\n    return internalOffer({\n      contract: this,\n      nftContractId: nft_contract_id,\n      tokenId: token_id,\n    });\n  }\n\n  //@ts-ignore\n  @call\n  //place an offer on a specific sale. The sale will go through as long as your deposit is greater than or equal to the list price\n  resolve_purchase({ buyer_id, price }: { buyer_id: string; price: string }) {\n    return internalResolvePurchase({ buyerId: buyer_id, price: price });\n  }\n}\n"],"names":["call","target","key","descriptor","view","NearBindgen","_init","args","deserializeArgs","ret","init","serialize","_get","Object","create","prototype","U64_MAX","EVICTED_REGISTER","log","params","env","map","x","undefined","JSON","stringify","join","signerAccountId","signer_account_id","read_register","predecessorAccountId","predecessor_account_id","attachedDeposit","attached_deposit","panic","msg","storageRead","storage_read","storageHasKey","storage_has_key","storageGetEvicted","currentAccountId","current_account_id","input","promiseThen","promiseIndex","accountId","methodName","amount","gas","promise_then","promiseBatchCreate","promise_batch_create","promiseBatchActionFunctionCall","promise_batch_action_function_call","promiseBatchActionTransfer","promise_batch_action_transfer","PromiseResult","promiseResult","resultIdx","status","promise_result","Successful","Failed","NotReady","promiseReturn","promiseIdx","promise_return","storageWrite","value","exist","storage_write","storageRemove","storage_remove","NearContract","deserialize","rawState","near","state","parse","c","default","assign","item","constructor","Error","serializeReturn","LookupMap","keyPrefix","containsKey","storageKey","get","raw","remove","set","storageValue","extend","objects","kv","data","u8ArrayToBytes","array","e","String","fromCharCode","bytesToU8Array","bytes","Uint8Array","length","i","charCodeAt","strOrU8Array","checkStringIsBytes","str","assert","b","ERR_INDEX_OUT_OF_BOUNDS","ERR_INCONSISTENT_STATE","indexToKey","prefix","index","Uint32Array","buffer","Vector","len","isEmpty","swapRemove","pop","last","push","element","lastIndex","lastKey","replace","elements","Symbol","iterator","VectorIterator","clear","toArray","v","vector","current","next","done","UnorderedMap","keyIndexPrefix","indexKey","indexValue","keys","values","keysLen","valuesLen","keysIsEmpty","valuesIsEmpty","serializeIndex","deserializeIndex","rawIndex","getIndexRaw","indexLookup","indexRaw","nextIndex","nextIndexRaw","lastLookupKey","UnorderedMapIterator","kvs","k","unorderedMap","UnorderedSet","elementIndexPrefix","elementsPrefix","contains","lastElement","lastLookupElement","Listing","token_id","owner_id","approval_id","company_id","sale_price","get_listings","contract","listings","listing","get_listings_by_company","Array","from","restoreOwners","byCompanyId","get_listings_by_owner","byOwnerId","list_nft","signerId","alreadyExist","toString","success","collection","GAS_FOR_ROYALTIES","GAS_FOR_NFT_TRANSFER","internalRemoveListings","tokens","tokenId","sales","internalOffer","nftContractId","deposit","valueOf","buyerId","price","BigInt","processPurchase","sale","promise","receiver_id","memo","balance","max_len_payout","buyer_id","internalResolvePurchase","result","payout","payoutOption","remainder","entries","forEach","Contract","_class","_class2","ownerId","storageDeposits","nft_list","nft_unlist","get_all_listings","get_company_listings","get_owner_listings","offer","nft_contract_id","resolve_purchase","_applyDecoratedDescriptor","getOwnPropertyDescriptor","_contract","value_return"],"mappings":"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"}